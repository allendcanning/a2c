AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Athletes to College Portal
Globals:
  Function:
    Runtime: python3.7
    Timeout: 30
Resources:
  athleteApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Auth:
        DefaultAuthorizer: a2cCognitoAuthorizer
        Authorizers:
          a2cCognitoAuthorizer:
            UserPoolArn: arn:aws:cognito-idp:us-east-1:530317771161:userpool/us-east-1_DOD7SyKZu
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "2019-04-23T16:22:22Z"
          title: "a2c-API"
        host: "byh6q12oyj.execute-api.us-east-1.amazonaws.com"
        basePath: "/dev"
        schemes:
        - "https"
        paths:
          /:
            get:
              produces:
              - "text/html"
              parameters:
              - name: "username"
                in: "query"
                required: false
                type: "string"
              - name: "Authorization"
                in: "header"
                required: false
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  headers:
                    Authorization:
                      type: "string"
                    Content-type:
                      type: "string"
              security:
              - a2c_cognito: []
              x-amazon-apigateway-integration:
                uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:530317771161:function:a2c/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            post:
              produces:
              - "application/json"
              parameters:
              - name: "Authorization"
                in: "header"
                required: false
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  headers:
                    Authorization:
                      type: "string"
                    Content-Type:
                      type: "string"
              security:
              - a2c_cognito: []
              x-amazon-apigateway-integration:
                uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:530317771161:function:a2c/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
        securityDefinitions:
          a2c_cognito:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "cognito_user_pools"
            x-amazon-apigateway-authorizer:
              providerARNs:
                - arn:aws:cognito-idp:us-east-1:530317771161:userpool/us-east-1_DOD7SyKZu
              type: "cognito_user_pools"
  loginApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "2019-04-25T13:07:39Z"
          title: "logina2c-API"
        host: "devportal.thefirmu.org"
        basePath: "/dev"
        schemes:
        - "https"
        paths:
          /:
            get:
              produces:
              - "application/json"
              parameters:
              - name: "Authorization"
                in: "header"
                required: false
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  headers:
                    Authorization:
                      type: "string"
                    Content-type:
                      type: "string"
              x-amazon-apigateway-integration:
                uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:530317771161:function:login-a2c/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            post:
              produces:
              - "application/json"
              parameters:
              - name: "Authorization"
                in: "header"
                required: false
                type: "string"
              responses:
                '200':
                  description: "200 response"
                  headers:
                    Authorization:
                      type: "string"
                    Content-Type:
                      type: "string"
              x-amazon-apigateway-integration:
                uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:530317771161:function:login-a2c/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
  displayPortalFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      CodeUri: ./athlete/
      Events:
        displayPortalApi:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref athleteApi
        updatePortalApi:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId: !Ref athleteApi
  loginPortalFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: login_function.lambda_handler
      CodeUri: ./login/function.zip
      Events:
        formPortalApi:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref loginApi
        loginPortalApi:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId: !Ref loginApi
