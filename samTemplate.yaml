AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Athletes to College Portal
Globals:
  Function:
    Runtime: python3.7
    Timeout: 30
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Default: vpc-729d3814
  CognitoDomain:
    Type: String
    Default: thefirmu
  Environment:
    Type: String 
    Default: "dev"
Mappings:
  PortalName:
    dev: 
      DNS: devportal.thefirmu.org
    prod: 
      DNS: portal.thefirmu.org
  VPC2Subnet:
    vpc-729d3814:
      Subnets:
        - "subnet-76ade63f"
        - "subnet-8c44d6d7"
        - "subnet-be65cf82"
Resources:
  theFirmuCognitoPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
         AllowAdminCreateUserOnly: True
         InviteMessageTemplate:
           EmailMessage: !Join ['',["Welcome to The Firmu!  Below you will find your username and temporary password.  Please go to https://", !FindInMap ["PortalName", !Ref Environment, "DNS"], " to change your password.\n\nYour username is {username} and temporary password is {####}. \n\nThank you for being a member of The FirmU!"]]
           EmailSubject: "Welcome to The FirmU!"
      AutoVerifiedAttributes:
        - email
      DeviceConfiguration:
        ChallengeRequiredOnNewDevice: False
        DeviceOnlyRememberedOnUserPrompt: False
      EmailConfiguration:
        EmailSendingAccount: DEVELOPER
        ReplyToEmailAddress: admin@thefirmu.org
        SourceArn: !Join ['',['arn:aws:ses:',!Ref "AWS::Region",':',!Ref "AWS::AccountId",':identity/admin@thefirmu.org']]
      EmailVerificationMessage: !Join ['',["Your FirmU verification code is {####}. Please go to https://", !FindInMap ["PortalName", !Ref Environment, "DNS"]]]
      EmailVerificationSubject: "Your FirmU verification code"
      MfaConfiguration: "OFF"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: True
          RequireNumbers: True
          RequireSymbols: True
          RequireUppercase: True
          TemporaryPasswordValidityDays: 7
      Schema:
        - AttributeDataType: String
          Mutable: True
          Name: email
          Required: True
#      UserPoolName: !Join ['',["thefirmu-", !Ref Environment]]
      UserPoolName: "thefirmu"
  mgmtPortalCognitoPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "thefirmu.cognito.allow"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        -
          Effect: Allow
          Action: ['cognito-idp:AdminInitiateAuth', 'cognito-idp:AdminCreateUser']
          Resource: !GetAtt ['theFirmuCognitoPool','Arn']
      Roles:
        - !ImportValue 'a2c-mgmt-stack-MgmtRole'
  theFirmuCognitoClientSettings:
    Type: 'Custom::CognitoUserPoolClientSettings'
    Properties:
      ServiceToken: !ImportValue 'a2c-mgmt-stack-CognitoClientSettingsLambda'
      UserPoolId: !Ref theFirmuCognitoPool
      UserPoolClientId: !Ref theFirmuCognitoClient
      SupportedIdentityProviders:
        - COGNITO
      CallbackURL: !Join ['',['https://', !FindInMap ["PortalName", !Ref Environment, "DNS"],',https://',!GetAtt ['LoadBalancer','DNSName'],'/oauth2/idpresponse,https://',!FindInMap ["PortalName", !Ref Environment, "DNS"],'/oauth2/idpresponse,https://',!GetAtt ['LoadBalancer','DNSName']]]
      LogoutURL: !Join ['',['https://', !FindInMap ["PortalName", !Ref Environment, "DNS"]]]
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
  theFirmuMgmtCognitoClientSettings:
    Type: 'Custom::CognitoUserPoolClientSettings'
    Properties:
      ServiceToken: !ImportValue 'a2c-mgmt-stack-CognitoClientSettingsLambda'
      UserPoolId: !Ref theFirmuCognitoPool
      UserPoolClientId: !Ref theFirmuMgmtCognitoClient
      SupportedIdentityProviders:
        - COGNITO
      CallbackURL: !Join ['',['https://', !FindInMap ["PortalName", !Ref Environment, "DNS"],',https://',!GetAtt ['LoadBalancer','DNSName'],'/oauth2/idpresponse,https://',!FindInMap ["PortalName", !Ref Environment, "DNS"],'/oauth2/idpresponse,https://',!GetAtt ['LoadBalancer','DNSName']]]
      LogoutURL: !Join ['',['https://', !FindInMap ["PortalName", !Ref Environment, "DNS"]]]
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
  theFirmuDomain:
    Type: 'Custom::CognitoUserPoolDomain'
    Properties:
      ServiceToken: !ImportValue 'a2c-mgmt-stack-CognitoUserDomainLambda'
      UserPoolId: !Ref theFirmuCognitoPool
      Domain: !Ref CognitoDomain
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Join ['',['a2c-transcripts-',!Ref Environment, '-', !Ref "AWS::AccountId",'-s3']]
      VersioningConfiguration:
        Status: !Ref Versioning
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: aws:kms
            KMSMasterKeyID: bb4063b8-7d2d-4f7c-bb5a-43f13da28ed8
      PublicAccessBlockConfiguration:
        BlockPublicAcls: TRUE
        BlockPublicPolicy: TRUE
        IgnorePublicAcls: TRUE
        RestrictPublicBuckets: TRUE
  displayPortalRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: a2c-role
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Statement:
        -
          Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: ['sts:AssumeRole']
  displayPortalDynamoPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "a2c.dynamo.allow"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        -
          Effect: Allow
          Action: [ "dynamodb:PutItem",
                "dynamodb:DeleteItem",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:Query",
                "dynamodb:UpdateItem"
          ]
          Resource: !ImportValue 'a2c-mgmt-stack-DynamoDBARN'
      Roles:
        - !Ref "displayPortalRole"
  displayPortalCognitoPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "a2c.cognito.allow"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        -
          Effect: Allow
          Action: ['cognito-idp:AdminInitiateAuth', 'cognito-idp:AdminCreateUser']
          Resource: !GetAtt theFirmuCognitoPool.Arn
      Roles:
        - !Ref "displayPortalRole"
  displayPortalSSMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "a2c.ssm.allow"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        -
          Effect: Allow
          Action: ['ssm:GetParameter']
          Resource: !Join ['',['arn:aws:ssm:',!Ref 'AWS::Region',':',!Ref 'AWS::AccountId',':parameter/a2c/*']]
      Roles:
        - !Ref "displayPortalRole"
  displayPortalS3Policy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "a2c.s3.allow"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        -
          Effect: Allow
          Action: [
            's3:PutObject',
            's3:ListObjects',
            's3:GetObject'
          ]
          Resource: !Join ['',[!GetAtt S3Bucket.Arn, '/*']]
      Roles:
        - !Ref "displayPortalRole"
  theFirmuCognitoClient:
    Type: AWS::Cognito::UserPoolClient
    Properties: 
      ClientName: athlete
      ExplicitAuthFlows: 
        - ADMIN_NO_SRP_AUTH
      GenerateSecret: True
      RefreshTokenValidity: 30
      UserPoolId: !Ref theFirmuCognitoPool
  theFirmuMgmtCognitoClient:
    Type: AWS::Cognito::UserPoolClient
    Properties: 
      ClientName: mgmt
      ExplicitAuthFlows: 
        - ADMIN_NO_SRP_AUTH
      GenerateSecret: True
      RefreshTokenValidity: 30
      UserPoolId: !Ref theFirmuCognitoPool
  cognitoPoolSSM:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: !Join ['',['/a2c/', !Ref Environment, '/cognito_pool']]
      Type: String
      Value: !Ref theFirmuCognitoPool
  cognitoAthleteClientIdSSM:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: !Join ['',['/a2c/', !Ref Environment, '/athlete_cognito_client_id']]
      Type: String
      Value: !Ref theFirmuCognitoClient
  cognitoMgmtClientIdSSM:
    Type: AWS::SSM::Parameter
    Properties: 
      Name: !Join ['',['/a2c/', !Ref Environment, '/mgmt_cognito_client_id']]
      Type: String
      Value: !Ref theFirmuMgmtCognitoClient
  cognitoAuthUrlSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join ['',['/a2c/', !Ref Environment, '/cognito_auth_url']]
      Name: /a2c/dev/cognito_auth_url
      Type: String
      Value: !Join ['',['https://',!Ref CognitoDomain,'.auth.us-east-1.amazoncognito.com/oath2/']]
  cognitoContentUrlSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join ['',['/a2c/', !Ref Environment, '/content_url']]
      Type: String
      Value: !Join ['',['https://',!FindInMap ["PortalName", !Ref Environment, "DNS"], '/']]
  s3BucketSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join ['',['/a2c/', !Ref Environment, '/transcript_s3_bucket']]
      Type: String
      Value: !Ref S3Bucket
  displayPortalFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      CodeUri: ./athlete/
      Role: !GetAtt ["displayPortalRole","Arn"]
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing 
      Subnets: !FindInMap [VPC2Subnet, !Ref "VpcId", Subnets]
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LambdaInvokePermission
    Properties:
      TargetType: lambda
      Targets:
      - Id: !GetAtt displayPortalFunction.Arn
  HttpsListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref TargetGroup
        Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Certificates: 
      - CertificateArn: 'arn:aws:acm:us-east-1:530317771161:certificate/192967f9-e1f8-4fb4-8d1d-c1ab00381c4d'
      Port: 443
      Protocol: HTTPS
  ListenerCert:
    Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
    Properties: 
      Certificates: 
      - CertificateArn: 'arn:aws:acm:us-east-1:530317771161:certificate/192967f9-e1f8-4fb4-8d1d-c1ab00381c4d'
      ListenerArn: !Ref HttpsListener
  CognitoListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: 
      - theFirmuDomain
      - theFirmuCognitoClientSettings
    Properties: 
      Actions: 
        - Type: authenticate-cognito
          AuthenticateCognitoConfig:
            UserPoolArn: !GetAtt theFirmuCognitoPool.Arn
            UserPoolClientId: !Ref theFirmuCognitoClient
            UserPoolDomain: "thefirmu"
          Order: 1
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
          Order: 2
      Conditions: 
        - Field: path-pattern
          Values: [ "/" ]
      ListenerArn: !Ref HttpsListener
      Priority: 1
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http(s) to client host
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt displayPortalFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: elasticloadbalancing.amazonaws.com
  dnsEntry:
    Type: AWS::Route53::RecordSet
    Properties: 
      Comment: DNS record for ALB
      HostedZoneName: thefirmu.org.
#      Name: !Join ['',[!Ref Environment, 'portal.thefirmu.org']]
      Name: devportal.thefirmu.org
      ResourceRecords: 
        - !GetAtt LoadBalancer.DNSName
      TTL: 300
      Type: CNAME
Outputs:
  LoadBalancerDns:
    Description: DNS entry for Load Balancer
    Value: !GetAtt ["LoadBalancer","DNSName"]
    Export:
      Name: !Sub "${AWS::StackName}-LBDnsName"
